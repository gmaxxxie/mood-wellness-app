generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                    Int      @id @default(autoincrement())
  username              String   @unique @db.VarChar(255)
  email                 String?  @unique @db.VarChar(255)
  password_hash         String   @db.VarChar(255)
  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @default(now()) @db.Timestamp(6)
  preferences           Json?    @default("{}")
  is_active             Boolean? @default(true)
  
  user_assessments      user_assessments[]
  recommendations       recommendations[]
  voice_records         voice_records[]
  user_statistics       user_statistics[]
}

model emotion_categories {
  id                    Int      @id @default(autoincrement())
  name                  String   @db.VarChar(100)
  name_zh               String   @db.VarChar(100)
  description           String?
  color_code            String?  @db.VarChar(7)
  parent_id             Int?
  is_primary            Boolean? @default(false)
  
  parent                emotion_categories? @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children              emotion_categories[] @relation("CategoryHierarchy")
  emotion_tags          emotion_tags[]
  user_assessments_primary    user_assessments[] @relation("PrimaryEmotion")
  user_assessments_secondary  user_assessments[] @relation("SecondaryEmotion")
  emotion_solution_mapping    emotion_solution_mapping[]
}

model emotion_tags {
  id                    Int      @id @default(autoincrement())
  category_id           Int?
  tag_name              String   @db.VarChar(100)
  tag_name_zh           String   @db.VarChar(100)
  intensity_level       Int?
  created_at            DateTime @default(now()) @db.Timestamp(6)
  
  emotion_category      emotion_categories? @relation(fields: [category_id], references: [id])
  

}

model assessment_questions {
  id                    Int      @id @default(autoincrement())
  question_text         String
  question_text_zh      String
  question_type         String   @db.VarChar(50)
  category              String?  @db.VarChar(100)
  options               Json?
  weight                Decimal? @default(1.0) @db.Decimal(3,2)
  is_active             Boolean? @default(true)
  created_at            DateTime @default(now()) @db.Timestamp(6)
}

model solution_types {
  id                    Int      @id @default(autoincrement())
  type_name             String   @db.VarChar(100)
  type_name_zh          String   @db.VarChar(100)
  description           String?
  icon                  String?  @db.VarChar(100)
  color                 String?  @db.VarChar(7)
  
  solutions             solutions[]
  user_statistics       user_statistics[]
}

model solutions {
  id                    Int      @id @default(autoincrement())
  type_id               Int?
  title                 String   @db.VarChar(255)
  title_zh              String   @db.VarChar(255)
  description           String?
  description_zh        String?
  instructions          String
  instructions_zh       String
  duration_minutes      Int?
  difficulty_level      Int?
  resource_url          String?  @db.VarChar(500)
  tags                  String[]
  effectiveness_score   Decimal? @default(0.0) @db.Decimal(3,2)
  usage_count           Int?     @default(0)
  is_active             Boolean? @default(true)
  created_at            DateTime @default(now()) @db.Timestamp(6)
  
  solution_type         solution_types? @relation(fields: [type_id], references: [id])
  emotion_solution_mapping emotion_solution_mapping[]
  recommendations       recommendations[]
  

}

model emotion_solution_mapping {
  id                    Int      @id @default(autoincrement())
  emotion_category_id   Int?
  solution_id           Int?
  effectiveness_weight  Decimal? @default(1.0) @db.Decimal(3,2)
  priority_order        Int?     @default(1)
  
  emotion_category      emotion_categories? @relation(fields: [emotion_category_id], references: [id])
  solution              solutions? @relation(fields: [solution_id], references: [id])
}

model user_assessments {
  id                    Int      @id @default(autoincrement())
  user_id               Int?
  assessment_type       String   @db.VarChar(50)
  responses             Json
  emotion_scores        Json?
  primary_emotion       Int?
  secondary_emotion     Int?
  intensity_level       Int?
  confidence_score      Decimal?  @db.Decimal(3,2)
  created_at            DateTime @default(now()) @db.Timestamp(6)
  
  user                  users? @relation(fields: [user_id], references: [id])
  primary_emotion_category      emotion_categories? @relation("PrimaryEmotion", fields: [primary_emotion], references: [id])
  secondary_emotion_category    emotion_categories? @relation("SecondaryEmotion", fields: [secondary_emotion], references: [id])
  recommendations       recommendations[]
  voice_records         voice_records[]
  

}

model recommendations {
  id                    Int      @id @default(autoincrement())
  user_id               Int?
  assessment_id         Int?
  solution_id           Int?
  recommendation_score  Decimal?  @db.Decimal(3,2)
  reason                String?
  is_accepted           Boolean?
  completed_at          DateTime? @db.Timestamp(6)
  effectiveness_rating  Int?
  user_feedback         String?
  created_at            DateTime @default(now()) @db.Timestamp(6)
  
  user                  users? @relation(fields: [user_id], references: [id])
  assessment            user_assessments? @relation(fields: [assessment_id], references: [id])
  solution              solutions? @relation(fields: [solution_id], references: [id])
  

}

model voice_records {
  id                    Int      @id @default(autoincrement())
  user_id               Int?
  assessment_id         Int?
  audio_file_path       String?  @db.VarChar(500)
  transcription         String?
  emotion_analysis      Json?
  processing_status     String?  @default("pending") @db.VarChar(50)
  created_at            DateTime @default(now()) @db.Timestamp(6)
  
  user                  users? @relation(fields: [user_id], references: [id])
  assessment            user_assessments? @relation(fields: [assessment_id], references: [id])
}

model user_statistics {
  id                           Int      @id @default(autoincrement())
  user_id                      Int?     @unique
  total_assessments            Int?     @default(0)
  total_recommendations_used   Int?     @default(0)
  favorite_solution_type       Int?
  average_mood_improvement     Decimal? @db.Decimal(3,2)
  streak_days                  Int?     @default(0)
  last_active_date             DateTime? @db.Date
  created_at                   DateTime @default(now()) @db.Timestamp(6)
  updated_at                   DateTime @default(now()) @db.Timestamp(6)
  
  user                         users? @relation(fields: [user_id], references: [id])
  favorite_solution_type_relation solution_types? @relation(fields: [favorite_solution_type], references: [id])
}
